ECMAScript 6 新增了正式的 Promise（期约）引用类型，支持优雅地定义和组织异步逻辑。
接下来几个版本增加了使用 async 和 await 关键字定义异步函数的机制

》11.2期约
	》Promise/A+规范
		ECMAScript 6 增加了对 Promises/A+规范的完善支持，即 Promise 类型。一经推出，Promise 就
		大受欢迎，成为了主导性的异步编程机制。所有现代浏览器都支持 ES6 期约，很多其他浏览器 API（如
		fetch()和 Battery Status API）也以期约为基础
	》期约基础
		》创建新期约时需要传入执行器（executor）函数作为参数
			let p = new Promise(() => {}); //不提供执行器函数，就会抛出 SyntaxError
		》控制期约状态的转换是通过调用它的两个函数参数实现的。
			这两个函数参数通常都命名为 resolve()和 reject()
			let p1 = new Promise((resolve, reject) => resolve()); 
			setTimeout(console.log, 0, p1); // Promise <resolved>
		》Promise.resolve()
			》期约并非一开始就必须处于待定状态，然后通过执行器函数才能转换为落定状态。通过调用
				romise.resolve()静态方法，可以实例化一个解决的期约
				let p2 = Promise.resolve();
				这个解决的期约的值对应着传给 Promise.resolve()的第一个参数 // 多余的参数会忽略
				使用这个静态方法，实际上可以把任何值都转换为一个期约
			》如果传入的参数本身是一个期约，那它的行为就类似于一个空包装。
				因此，Promise.resolve()可以说是一个幂等方法
				let p = new Promise(() => {})
				Promise.resolve(p); //  Promise <pending>
				p === Promise.resolve(Promise.resolve(p)) // true
		》Promise.reject()
			》Promise.reject()会实例化一个拒绝的期约并抛出一个异步错误
			（这个错误不能通过 try/catch 捕获，而只能通过拒绝处理程序捕获）
			》let p2 = Promise.reject(); 
				这个拒绝的期约的理由就是传给 Promise.reject()的第一个参数。
				这个参数也会传给后续的拒绝处理程序：
				let p = Promise.reject(3); 
				setTimeout(console.log, 0, p); // Promise <rejected>: 3 
				p.then(null, (e) => setTimeout(console.log, 0, e)); // 3
			》关键在于，Promise.reject()并没有照搬 Promise.resolve()的幂等逻辑。
				如果给它传一个期约对象，则这个期约会成为它返回的拒绝期约的理由
	》期约的实例方法
		》实现 Thenable 接口
			在 ECMAScript 暴露的异步结构中，任何对象都有一个 then()方法。这个方法被认为实现了
			Thenable 接口。下面的例子展示了实现这一接口的最简单的类：
			class MyThenable { 
				then() {} 
			} 
			ECMAScript 的 Promise 类型实现了 Thenable 接口。这个简化的接口跟 TypeScript 或其他包中的
			接口或类型定义不同，它们都设定了 Thenable 接口更具体的形式。
		》 Promise.prototype.then()
			为期约实例添加处理程序的主要方法。这个 then()方法接收最多
			两个参数：onResolved 处理程序和 onRejected 处理程序。
			这两个参数都是可选的。而且，传给 then()的任何非函数类型的参数都会被静默忽略
			》处理程序的返回值会通过Promise.resolve()包装来生成新期约，如果没有提供处理程序则
				Promise.resolve()就会包装上一个期约解决后的值，如果没有显示的返回语句，则包装默认返回的undefined
			*》抛出异常会返回拒绝的期约：
				let p1 = Promise.resolve('foo');
				let p10 = p1.then(() => { throw 'baz'; }); 
				// Uncaught (in promise) baz 
				setTimeout(console.log, 0, p10); // Promise <rejected> baz 
				返回错误值不会触发上面的拒绝行为，而会把错误对象包装在一个解决的期约中：
				let p11 = p1.then(() => Error('qux')); 
				setTimeout(console.log, 0, p11); // Promise <resolved>: Error: qux
			》onRejected 处理程序也与之类似：
			onRejected 处理程序返回的值也会被 Promise.resolve()包装，乍一看这可能有点违反直觉，
			但是想一想，onRejected 处理程序的任务不就是捕获异步错误吗？
			因此，拒绝处理程序在捕获错误后不抛出异常是符合期约的行为，应该返回一个解决期约
		》 Promise.prototype.catch()
			这个方法只接收一个参数：onRejected 处理程序。事实上，这个方法就是一个语法糖，
			调用它就相当于调用 Promise.prototype.then(null, onRejected)
		》 Promise.prototype.finally()
			这个处理程序在期约转换为解决或拒绝状态时都会执行。
			但 onFinally 处理程序没有办法知道期约的状态是解决还是拒绝，所以这个方法主要用于添加清理代码。
			》这个新期约实例不同于 then()或 catch()方式返回的实例。因为 onFinally 被设计为一个状态
			无关的方法，所以在大多数情况下它将表现为父期约的传递。
			》如果返回的是一个待定的期约，或者 onFinally 处理程序抛出了错误（显式抛出或返回了一个拒
			绝期约），则会返回相应的期约（待定或拒绝）
	》期约连锁和期约合成
		》let p1 = new Promise((resolve, reject) => { 
		 console.log('p1 executor'); 
		 setTimeout(resolve, 1000); 
		}); 
		p1.then(() => new Promise((resolve, reject) => { 
		 console.log('p2 executor'); 
		 setTimeout(resolve, 1000); 
		 })) 
		 .then(() => new Promise((resolve, reject) => { 
		 console.log('p3 executor'); 
		 setTimeout(resolve, 1000); 
		 })) 
		 .then(() => new Promise((resolve, reject) => { 
		 console.log('p4 executor'); 
		 setTimeout(resolve, 1000); 
		 }));
		》Promise.all()
			Promise.all()静态方法创建的期约会在一组期约全部解决之后再解决。
			这个静态方法接收一个可迭代对象，返回一个新期约
			let p1 = Promise.all([ 
			 Promise.resolve(), 
			 Promise.resolve() 
			]); 
			// 可迭代对象中的元素会通过 Promise.resolve()转换为期约
			let p2 = Promise.all([3, 4]); 
			// 空的可迭代对象等价于 Promise.resolve() 
			let p3 = Promise.all([]);
			果所有期约都成功解决，则合成期约的解决值就是所有包含期约解决值的数组;
			如果有期约拒绝，则第一个拒绝的期约会将自己的理由作为合成期约的拒绝理由。
			之后再拒绝的期约不会影响最终期约的拒绝理由
		》Promise.race()
			Promise.race()静态方法返回一个包装期约，是一组集合中最先解决或拒绝的期约的镜像。
			这个方法接收一个可迭代对象，返回一个新期约
			无论是解决还是拒绝，只要是第一个落定的期约，
			Promise.race()就会包装其解决值或拒绝理由并返回新期约
		》串行期约合成
			function addTwo(x) {return x + 2;} 
			function addThree(x) {return x + 3;} 
			function addFive(x) {return x + 5;} 
			function compose(...fns) { 
			 return (x) => fns.reduce((promise, fn) => promise.then(fn), Promise.resolve(x)) 
			} 
			let addTen = compose(addTwo, addThree, addFive);
			addTen(8).then(console.log); // 18
		》期约扩展
			ES6 期约实现是很可靠的，但它也有不足之处。比如，很多第三方期约库实现中具备而 ECMAScript
			规范却未涉及的两个特性：期约取消和进度追踪
			》期约取消
			》期约进度通知
			ES6 不支持取消期约和进度通知，一个主要原因就是这样会导致期约连锁和期约合成
			过度复杂化。比如在一个期约连锁中，如果某个被其他期约依赖的期约被取消了或者发出了
			通知，那么接下来应该发生什么完全说不清楚。毕竟，如果取消了 Promise.all()中的一个
			期约，或者期约连锁中前面的期约发送了一个通知，那么接下来应该怎么办才比较合理呢？
		
	》异步函数:async/await 是 ES8 规范新增的
		》async
			async关键字用于声明异步函数。这个关键字可以用在函数声明、函数表达式、箭头函数和方法上
			》异步函数如果使用 return 关键字返回了值（如果没有 return 则会返回 undefined），这
			个值会被 Promise.resolve()包装成一个期约对象。
			异步函数始终返回期约对象。在函数外部调用这个函数可以得到它返回的期约
			异步函数的返回值期待（但实际上并不要求）一个实现 thenable 接口的对象，但常规的值也可以。
			如果返回的是实现 thenable 接口的对象，则这个对象可以由提供给 then()的处理程序“解包”。
			如果不是，则返回值就被当作已经解决的期约
			async function foo() { 
			 return 'foo'; // 返回一个原始值 
			} 
			foo().then(console.log); // foo
			async function bar() { 
			 return ['bar']; // 返回一个没有实现 thenable 接口的对象
			} 
			bar().then(console.log); // ['bar']
			async function baz() { 
			 const thenable = { 
			 then(callback) { callback('baz'); } 
			 }; 
			 return thenable; // 返回一个实现了 thenable 接口的非期约对象
			} 
			baz().then(console.log); // baz
		》await
			使用 await关键字可以暂停异步函数代码的执行，等待期约解决
			使用 async/await 可以写成这样：
			async function foo() { 
			 let p = new Promise((resolve, reject) => setTimeout(resolve, 1000, 3)); 
			 console.log(await p); 
			} 
			foo(); // 3
			await 关键字期待（但实际上并不要求）一个实现 thenable 接口的对象，但常规的值也可以。如
			果是实现 thenable 接口的对象，则这个对象可以由 await 来“解包”。如果不是，则这个值就被当作
			已经解决的期约
			async function foo() { 
			 console.log(await 'foo'); // 等待一个原始值 
			} 
			foo(); // foo
			async function bar() { 
			 console.log(await ['bar']); // 等待一个没有实现 thenable 接口的对象
			} 
			bar(); // ['bar']
			async function baz() { 
			 const thenable = { 
			 then(callback) { callback('baz'); } 
			 }; 
			 console.log(await thenable); // 等待一个实现了 thenable 接口的非期约对象
			} 
			baz(); // baz
		》await 的限制
			await 关键字必须在异步函数中使用，不能在顶级上下文如<script>标签或模块中使用。不过，
			定义并立即调用异步函数是没问题的
			
		》实现sleep
			async function sleep(delay) { 
				return new Promise((resolve) => setTimeout(resolve, delay)); 
			}
			async function foo() { 
			 const t0 = Date.now(); 
			 await sleep(1500); // 暂停约 1500 毫秒
			 console.log(Date.now() - t0); 
			} 
			foo(); // 1502
			
			
			
			